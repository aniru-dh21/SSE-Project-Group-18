# Generated by Django 5.0.9 on 2024-11-13 01:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(blank=True, null=True)),
                ('mobile', models.CharField(max_length=15)),
                ('country_of_citizenship', models.CharField(max_length=100)),
                ('language_preferred', models.CharField(max_length=50)),
                ('covid_vaccination_status', models.CharField(choices=[('vaccinated', 'Vaccinated'), ('not_vaccinated', 'Not Vaccinated')], default='not_vaccinated', max_length=20)),
                ('trade', models.CharField(max_length=50)),
                ('profession', models.CharField(max_length=50)),
                ('is_service_provider', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InspectionService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_date', models.DateField()),
                ('alternative_date', models.DateField(blank=True, null=True)),
                ('duration', models.CharField(choices=[('few_hours', 'Few Hours'), ('one_day', 'One Day'), ('several_days', 'Several Days')], max_length=20)),
                ('preferred_cost_range', models.CharField(max_length=50)),
                ('special_requirements', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inspector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_inspections', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('photos', models.JSONField(blank=True, default=list)),
                ('customized_options', models.TextField(blank=True)),
                ('experiences', models.TextField(blank=True)),
                ('feedback', models.JSONField(blank=True, default=list)),
                ('renovation_plans', models.TextField(blank=True)),
                ('is_available', models.BooleanField(default=True)),
                ('service_area', models.CharField(blank=True, max_length=200)),
                ('photo', models.ImageField(blank=True, help_text='Upload a single photo for your service', null=True, upload_to='service_photos/')),
                ('provider', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='provided_services', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PackageService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_optional', models.BooleanField(default=False)),
                ('individual_discount', models.DecimalField(decimal_places=2, default=0.0, help_text='Individual discount percentage for this service within the package', max_digits=5)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='package_services', to='myapp.service')),
            ],
            options={
                'db_table': 'myapp_packageservice',
            },
        ),
        migrations.CreateModel(
            name='InspectionFindings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_description', models.TextField()),
                ('location_in_house', models.CharField(max_length=100)),
                ('urgency_level', models.CharField(choices=[('critical', 'Critical - Immediate Action Required'), ('high', 'High Priority'), ('medium', 'Medium Priority'), ('low', 'Low Priority')], max_length=20)),
                ('estimated_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('provider_feedback', models.TextField(blank=True, help_text="Service provider's feedback and recommendations")),
                ('recommendation_priority', models.CharField(choices=[('immediate', 'Immediate Action Recommended'), ('soon', 'Address Within 3-6 Months'), ('future', 'Future Consideration'), ('optional', 'Optional Improvement')], default='soon', max_length=20)),
                ('estimated_timeline', models.CharField(blank=True, help_text='Estimated timeline for recommended services', max_length=100)),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='myapp.inspectionservice')),
                ('recommended_cost', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='myapp.service')),
                ('recommended_services', models.ManyToManyField(blank=True, related_name='recommended_in_findings', to='myapp.service')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_date', models.DateTimeField(auto_now_add=True)),
                ('payment_status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed'), ('Refunded', 'Refunded')], default='Pending', max_length=20)),
                ('amount_paid', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stripe_session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.service')),
            ],
        ),
        migrations.CreateModel(
            name='ServicePackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('base_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('discount_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('is_customizable', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('services', models.ManyToManyField(related_name='packages', through='myapp.PackageService', to='myapp.service')),
            ],
            options={
                'db_table': 'myapp_servicepackage',
            },
        ),
        migrations.AddField(
            model_name='packageservice',
            name='package',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='package_services', to='myapp.servicepackage'),
        ),
        migrations.AlterUniqueTogether(
            name='packageservice',
            unique_together={('package', 'service')},
        ),
    ]
